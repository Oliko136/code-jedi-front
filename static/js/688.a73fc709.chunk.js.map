{"version":3,"file":"static/js/688.a73fc709.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.jsx","schemas/loginSchema.js","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.jsx","pages/AuthPage/AuthPage.jsx","schemas/registerSchema.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Background = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  min-height: 100vh;\n  background: var(--welcomeBgColor);\n`;\n\nexport const FormWrap = styled.div`\n  padding: 24px;\n  width: calc(100% - 40px);\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  background-color: var(--bgColorAuth);\n  border-radius: 8px;\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n    height: 363px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 424px;\n    height: 395px;\n    padding: 40px;\n  }\n`;\n\nexport const AuthList = styled.ul`\n  display: flex;\n  gap: 14px;\n  margin-bottom: 26px;\n`;\n\nexport const AuthLink = styled(NavLink)`\n  color: rgba(255, 255, 255, 0.3);\n  font-size: 18px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n\n  &:hover {\n    color: #ffffff;\n  }\n\n  &.active {\n    color: #ffffff;\n  }\n`;\n\nexport const FormUi = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  label {\n    position: relative;\n  }\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 14px 18px;\n  background: transparent;\n  border: 1px solid var(--inputBorderFocus);\n  border-radius: 8px;\n  color: #ffffff;\n  opacity: 0.4;\n  transition: opacity 0.3s ease;\n  box-shadow: 0 4px 16px 0 rgba(22, 22, 22, 0.08);\n background: var(--inputBgColor);\n font-weight: 400;\n font-size: 14px;\nletter-spacing: -0.02em;\n\n  &:focus {\n    opacity: 1;\n  }\n\n  &:hover {\n    opacity: 1;\n  }\n  \n`;\n\nexport const PassInputWrap = styled.div`\n  position: relative;\n`;\n\nexport const HideBtn = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(-50%, 50%);\n  opacity: 0.4;\n  background-color: transparent;\n  cursor: pointer;\n  \n`;\n\nexport const SubmitBtn = styled.button`\n  display: flex;\n  justify-content: center;\n\n  align-items: center;\n  padding: 14px 0;\n  font-weight: 500;\n  font-size: 14px;\n  background: var(--inputBorderFocus);\n  border-radius: 8px;\n  color: var(--buttonColor);\n  transition: background 0.3s ease;\n\n  margin-top: 10px;\n\n  &:hover {\n    background: #9dc888;\n  }\n\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`;\n\nexport const ErrorPara = styled.span`\n  position: absolute;\n  left: 0;\n  bottom: -14px;\n  font-size: 10px;\n  color: #00de00;\n`;","import * as yup from 'yup';\n\nconst loginSchema = yup.object().shape({\n  \n  email: yup\n    .string()\n    \n    .matches(\n      /^[^@]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,4}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Maximum password length is 64 symbols')\n    .matches(\n        /^[\\S]+$/,\n        'Invalid password format')\n    .required('Password is required'),\n});\n\nexport default loginSchema;\n","import styled from 'styled-components';\n\nexport const FormWrapLog = styled.div`\n  padding: 24px;\n  width: calc(100% - 40px);\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  background-color: var(--bgColorAuth);\n  border-radius: 8px;\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n    height: 300px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 424px;\n    height: 332px;\n    padding: 40px;\n  }\n`;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/auth-operations';\nimport  loginSchema  from '../../schemas/loginSchema';\nimport {\n  Background,\n  AuthList,\n  AuthLink,\n  FormUi,\n  Input,\n  SubmitBtn,\n  ErrorPara,\n  PassInputWrap,\n  HideBtn, \n} from '../RegisterForm/RegisterForm.styled';\nimport {FormWrapLog} from './LoginForm.styled'\nimport Icon from '../Icon/Icon';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nconst LoginForm = () => {\n  \n  const [visible, setVisible] = useState(false);\n \n  const dispatch = useDispatch();\n\n  const submit = async (evt) => {\n    \n    const formData = {\n          email: evt.email,\n          password: evt.password,\n        };\n  \n        const isValid = await loginSchema.isValid(formData);            \n\n          if (!isValid) {\n            return;\n           }\n           \n        dispatch(logIn({ ...formData }))\n    reset();\n  }\n\n  const {register, handleSubmit,  reset, formState:{errors, isValid}  } = useForm({\n    initialValues: {\n             name: '',\n            email: '',\n            password: '',\n          },\n    mode: \"onBlur\",\n    resolver:yupResolver(loginSchema)\n  })\n\n\n  return (\n    <Background>\n      <FormWrapLog>\n        <AuthList>\n          <li>\n            <AuthLink to={`/auth/register`}>Registration</AuthLink>\n          </li>\n          <li>\n            <AuthLink to={`/auth/login`}>Log In</AuthLink>\n          </li>\n        </AuthList>\n\n        <FormUi onSubmit={handleSubmit(submit)} autoComplete=\"off\">\n         \n          \n          <label>\n            <Input\n            {...register('email') }\n            \n              name=\"email\"\n              placeholder= 'Enter your email'\n              type=\"email\"\n            />\n             {errors?.email && (<ErrorPara>{errors?.email?.message || 'Errors!'}</ErrorPara>)}\n          </label>\n        \n          <label>\n          \n            <PassInputWrap>\n              <Input\n              {...register('password') }\n                \n                name=\"password\"\n                placeholder= 'Confirm a password'\n                type={visible ? 'text' : 'password'}\n              />\n               {errors?.password && (<ErrorPara>{errors?.password?.message || 'Errors!'}</ErrorPara>)}\n              <HideBtn\n                type=\"button\"\n                onClick={() => {\n                  setVisible(!visible);\n                }}\n              >\n                <Icon width={20}\n                    height={20}\n                    fillColor={'none'}\n                    strokeColor={`#fff`}\n                    name={\"eye\"}\n                    />\n                \n              </HideBtn>\n            </PassInputWrap>     \n          </label>\n          \n          <SubmitBtn type=\"submit\"\n            disabled={!isValid}> \n            Log In Now\n          </SubmitBtn>\n        </FormUi>\n      </FormWrapLog>\n    </Background>\n  );\n};\n\nexport default LoginForm;\n\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from '../../redux/auth/auth-operations';\nimport  registerSchema  from '../../schemas/registerSchema';\nimport {\n  Background,\n  FormWrap,\n  AuthList,\n  AuthLink,\n  FormUi,\n  Input,\n  SubmitBtn,\n  ErrorPara,\n  PassInputWrap,\n  HideBtn,\n} from './RegisterForm.styled';\nimport Icon from \"../Icon/Icon\"\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nconst RegisterForm = () => {\n  \n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const submit = async (evt) => {\n    \n    const formData = {\n          name: evt.name,\n          email: evt.email,\n          password: evt.password,\n        };\n        \n        const isValid = await registerSchema.isValid(formData);            \n\n          if (!isValid) {\n            return;\n           }\n           \n        dispatch(registerThunk({ ...formData }))\n    reset();\n  }\n\n  const {register, handleSubmit,  reset, formState:{errors, isValid}  } = useForm({\n    initialValues: {\n             name: '',\n            email: '',\n            password: '',\n          },\n    mode: \"onBlur\",\n    resolver:yupResolver(registerSchema)\n  })\n  \n  return (\n    <Background>\n      <FormWrap>\n        <AuthList>\n          <li>\n            <AuthLink to={`/auth/register`}>Registration</AuthLink>\n          </li>\n          <li>\n            <AuthLink to={`/auth/login`}>Log In</AuthLink>\n          </li>\n        </AuthList>\n\n        <FormUi onSubmit={handleSubmit(submit)} autoComplete=\"off\">\n          <label>\n            <Input\n           \n            {...register('name') }\n              \n              name=\"name\"\n              placeholder='Enter your name'\n            />\n            {errors?.name && (<ErrorPara>{errors?.name?.message || 'Errors!'}</ErrorPara>)}       \n          </label>        \n          \n          <label>\n            <Input\n            {...register('email') }\n            \n              name=\"email\"\n              placeholder= 'Enter your email'\n              type=\"email\"\n            />\n             {errors?.email && (<ErrorPara>{errors?.email?.message || 'Errors!'}</ErrorPara>)}\n          </label>\n        \n          <label>\n          \n            <PassInputWrap>\n              <Input\n              {...register('password') }\n                \n                name=\"password\"\n                placeholder= 'Create a password'\n                type={visible ? 'text' : 'password'}\n              />\n               {errors?.password && (<ErrorPara>{errors?.password?.message || 'Errors!'}</ErrorPara>)}\n              <HideBtn\n                type=\"button\"\n                onClick={() => {\n                  setVisible(!visible);\n                }}\n              >\n               <Icon width={20}\n                    height={20}\n                    fillColor={'none'}\n                    strokeColor={`#fff`}\n                    name={\"eye\"}\n                    />\n              </HideBtn>\n            </PassInputWrap>\n           \n          </label>\n         \n          <SubmitBtn type=\"submit\"\n            disabled={!isValid}> \n            \n              Register Now\n            \n          </SubmitBtn>\n        </FormUi>\n      </FormWrap>\n    </Background>\n  );\n};\n\nexport default RegisterForm;\n","import { useParams } from 'react-router-dom';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\n\nconst AuthPage = () => {\n  const { id } = useParams();\n\n  return (\n    <>\n        { id === 'register' ? <RegisterForm /> : <LoginForm />}\n    </>\n  );\n};\n\nexport default AuthPage;\n","import * as yup from 'yup';\n\nconst registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters')\n    .max(32, 'Maximum name length is 32 symbols')\n    .required('Name is required'),\n  email: yup\n    .string()\n    \n    .matches(\n      /^[^@]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,4}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Maximum password length is 64 symbols')\n    .matches(\n        /^[\\S]+$/,\n        'Invalid password format')\n    .required('Password is required'),\n});\n\nexport default registerSchema;\n"],"names":["Background","styled","div","_templateObject","_taggedTemplateLiteral","FormWrap","_templateObject2","AuthList","ul","_templateObject3","AuthLink","NavLink","_templateObject4","FormUi","form","_templateObject5","Input","input","_templateObject6","PassInputWrap","_templateObject7","HideBtn","button","_templateObject8","SubmitBtn","_templateObject9","ErrorPara","span","_templateObject10","yup","shape","email","matches","required","password","min","max","FormWrapLog","LoginForm","_errors$email","_errors$password","visible","setVisible","useState","dispatch","useDispatch","register","handleSubmit","reset","formState","errors","isValid","useForm","initialValues","name","mode","resolver","yupResolver","loginSchema","_jsx","children","_jsxs","to","onSubmit","async","formData","evt","logIn","autoComplete","placeholder","type","message","onClick","Icon","width","height","fillColor","strokeColor","disabled","RegisterForm","_errors$name","registerSchema","registerThunk","AuthPage","id","useParams","_Fragment"],"sourceRoot":""}