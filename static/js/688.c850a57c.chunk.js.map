{"version":3,"file":"static/js/688.c850a57c.chunk.js","mappings":"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","sources":["schemas/loginSchema.js","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst loginSchema = yup.object().shape({\n  \n  email: yup\n    .string()\n    \n    .matches(\n      /^[^@]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,4}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Maximum password length is 64 symbols')\n    .matches(\n        /^[\\S]+$/,\n        'Invalid password format')\n    .required('Password is required'),\n});\n\nexport default loginSchema;\n","import styled from 'styled-components';\n\nexport const FormWrapLog = styled.div`\n  padding: 24px;\n  width: calc(100% - 40px);\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  background-color: var(--bgColorAuth);\n  border-radius: 8px;\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n    height: 300px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 424px;\n    height: 332px;\n    padding: 40px;\n  }\n`;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/auth-operations';\n// import { useAuth } from 'hooks';\nimport  loginSchema  from '../../schemas/loginSchema';\n// import SmallLoader from 'components/Loader/SmallLoader';\nimport {\n  Background,\n  AuthList,\n  AuthLink,\n  FormUi,\n  Input,\n  SubmitBtn,\n  ErrorPara,\n  PassInputWrap,\n  HideBtn, \n} from '../RegisterForm/RegisterForm.styled';\nimport {FormWrapLog} from './LoginForm.styled'\nimport Icon from '../Icon/Icon';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nconst LoginForm = () => {\n  \n  const [visible, setVisible] = useState(false);\n \n  const dispatch = useDispatch();\n//   const { isLoading } = useAuth();\n\n  const submit = async (evt) => {\n    \n    const formData = {\n          email: evt.email,\n          password: evt.password,\n        };\n  \n        const isValid = await loginSchema.isValid(formData);            \n\n          if (!isValid) {\n            return;\n           }\n           \n        dispatch(logIn({ ...formData }))\n        // await new Promise(res => setTimeout(res, 500));\n    reset();\n  }\n\n  const {register, handleSubmit,  reset, formState:{errors, isValid}  } = useForm({\n    initialValues: {\n             name: '',\n            email: '',\n            password: '',\n          },\n    mode: \"onBlur\",\n    resolver:yupResolver(loginSchema)\n  })\n\n\n  return (\n    <Background>\n      <FormWrapLog>\n        <AuthList>\n          <li>\n            <AuthLink to={`/auth/register`}>Registration</AuthLink>\n          </li>\n          <li>\n            <AuthLink to={`/auth/login`}>Log In</AuthLink>\n          </li>\n        </AuthList>\n\n        <FormUi onSubmit={handleSubmit(submit)} autoComplete=\"off\">\n         \n          \n          <label>\n            <Input\n            {...register('email') }\n            \n              name=\"email\"\n              placeholder= 'Enter your email'\n              type=\"email\"\n            />\n             {errors?.email && (<ErrorPara>{errors?.email?.message || 'Errors!'}</ErrorPara>)}\n          </label>\n        \n          <label>\n          \n            <PassInputWrap>\n              <Input\n              {...register('password') }\n                \n                name=\"password\"\n                placeholder= 'Confirm a password'\n                type={visible ? 'text' : 'password'}\n              />\n               {errors?.password && (<ErrorPara>{errors?.password?.message || 'Errors!'}</ErrorPara>)}\n              <HideBtn\n                type=\"button\"\n                onClick={() => {\n                  setVisible(!visible);\n                }}\n              >\n                <Icon width={20}\n                    height={20}\n                    fillColor={'none'}\n                    strokeColor={`#fff`}\n                    name={\"eye\"}\n                    />\n                \n              </HideBtn>\n            </PassInputWrap>     \n          </label>\n          \n          <SubmitBtn type=\"submit\"\n            disabled={!isValid}> \n            Log In Now\n          </SubmitBtn>\n        </FormUi>\n      </FormWrapLog>\n    </Background>\n  );\n};\n\nexport default LoginForm;\n\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from '../../redux/auth/auth-operations';\n// хук на useSelector\n// import { useAuth } from 'hooks';\nimport  registerSchema  from '../../schemas/registerSchema';\n// нужен Loader на кнопку?\n// import SmallLoader from 'components/Loader/SmallLoader';\nimport {\n  Background,\n  FormWrap,\n  AuthList,\n  AuthLink,\n  FormUi,\n  Input,\n  SubmitBtn,\n  ErrorPara,\n  PassInputWrap,\n  HideBtn,\n} from './RegisterForm.styled';\nimport Icon from \"../Icon/Icon\"\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nconst RegisterForm = () => {\n  \n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  // const { isLoading } = useAuth();\n\n  const submit = async (evt) => {\n    \n    const formData = {\n          name: evt.name,\n          email: evt.email,\n          password: evt.password,\n        };\n        \n        const isValid = await registerSchema.isValid(formData);            \n\n          if (!isValid) {\n            return;\n           }\n           \n        dispatch(registerThunk({ ...formData }))\n        // await new Promise(res => setTimeout(res, 500));\n    reset();\n  }\n\n  const {register, handleSubmit,  reset, formState:{errors, isValid}  } = useForm({\n    initialValues: {\n             name: '',\n            email: '',\n            password: '',\n          },\n    mode: \"onBlur\",\n    resolver:yupResolver(registerSchema)\n  })\n  \n  return (\n    <Background>\n      <FormWrap>\n        <AuthList>\n          <li>\n            <AuthLink to={`/auth/register`}>Registration</AuthLink>\n          </li>\n          <li>\n            <AuthLink to={`/auth/login`}>Log In</AuthLink>\n          </li>\n        </AuthList>\n\n        <FormUi onSubmit={handleSubmit(submit)} autoComplete=\"off\">\n          <label>\n            <Input\n           \n            {...register('name') }\n              \n              name=\"name\"\n              placeholder='Enter your name'\n            />\n            {errors?.name && (<ErrorPara>{errors?.name?.message || 'Errors!'}</ErrorPara>)}       \n          </label>        \n          \n          <label>\n            <Input\n            {...register('email') }\n            \n              name=\"email\"\n              placeholder= 'Enter your email'\n              type=\"email\"\n            />\n             {errors?.email && (<ErrorPara>{errors?.email?.message || 'Errors!'}</ErrorPara>)}\n          </label>\n        \n          <label>\n          \n            <PassInputWrap>\n              <Input\n              {...register('password') }\n                \n                name=\"password\"\n                placeholder= 'Create a password'\n                type={visible ? 'text' : 'password'}\n              />\n               {errors?.password && (<ErrorPara>{errors?.password?.message || 'Errors!'}</ErrorPara>)}\n              <HideBtn\n                type=\"button\"\n                onClick={() => {\n                  setVisible(!visible);\n                }}\n              >\n               <Icon width={20}\n                    height={20}\n                    fillColor={'none'}\n                    strokeColor={`#fff`}\n                    name={\"eye\"}\n                    />\n              </HideBtn>\n            </PassInputWrap>\n           \n          </label>\n         \n          <SubmitBtn type=\"submit\"\n            disabled={!isValid}> \n            \n              Register Now\n            \n          </SubmitBtn>\n        </FormUi>\n      </FormWrap>\n    </Background>\n  );\n};\n\nexport default RegisterForm;\n","import { useParams } from 'react-router-dom';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\n\nconst AuthPage = () => {\n  const { id } = useParams();\n\n  return (\n    <>\n        { id === 'register' ? <RegisterForm /> : <LoginForm />}\n    </>\n  );\n};\n\nexport default AuthPage;\n"],"names":["yup","shape","email","matches","required","password","min","max","FormWrapLog","styled","div","_templateObject","_taggedTemplateLiteral","LoginForm","_errors$email","_errors$password","visible","setVisible","useState","dispatch","useDispatch","register","handleSubmit","reset","formState","errors","isValid","useForm","initialValues","name","mode","resolver","yupResolver","loginSchema","_jsx","Background","children","_jsxs","AuthList","AuthLink","to","FormUi","onSubmit","async","formData","evt","logIn","autoComplete","Input","placeholder","type","ErrorPara","message","PassInputWrap","HideBtn","onClick","Icon","width","height","fillColor","strokeColor","SubmitBtn","disabled","RegisterForm","_errors$name","registerSchema","FormWrap","registerThunk","AuthPage","id","useParams","_Fragment"],"sourceRoot":""}